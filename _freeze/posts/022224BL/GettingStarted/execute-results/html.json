{
  "hash": "fe076c95ddd84d86bcfd11e899b4ea8d",
  "result": {
    "markdown": "---\ntitle: \"How to write a blog post with R or Python code?\"\nauthor: \"Brian Leung\"\ndate: \"2024-02-21\"\ncategories: [news, code, R, Python]\nmessage: false\nwarning: false\n---\n\n\nWelcome to P-DAWG! This post introduces us to how to use Quarto (`.qmd`) to write a blog-style document that integrates `R` or `Python` code with text!\n\n## Quarto (`.qmd`) is just like RMarkdown (`.rmd`)!\n\nYou can open a new Quarto Document (`.qmd`) in Rstudio and choose `HTML` as the format. This works just like a traditional RMarkdown file (`.rmd`).\n\nYou can copy and paste the following code to the preamble (i.e., top of the document) and fill out the details:\n\n```         \n---\ntitle: \"Give it a nice title\"\nauthor: \"Your good name\"\ndate: \"today is...\"\ncategories: [tag1, tag2, tag3...] \nmessage: false \nwarning: false\n---\n```\n\n## Working with `R` code\n\nInside the `.qmd` document, you can type text anywhere you like. To insert a code, type \"/\" to select options from a drop-down menu (if you are using Visual editor mode). For example, I can insert the following `R` code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nThen you can perform data analysis as usual:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n\niris %>%\n  group_by(Species) %>%\n  summarize(across(where(is.numeric), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  <fct>             <dbl>       <dbl>        <dbl>       <dbl>\n1 setosa             5.01        3.43         1.46       0.246\n2 versicolor         5.94        2.77         4.26       1.33 \n3 virginica          6.59        2.97         5.55       2.03 \n```\n:::\n:::\n\n\nVisualization is also easy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +\n  geom_point() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](GettingStarted_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Working with `Python` code\n\nQuarto document has the advantage of being able to run `Python` code at the same time. But this does requies some knowledge about the language, and especially how virtual environment works for managing packages.\n\nTo do that from a `RStudio` environment, you have to first install `reticulate` package in R by running `install.packages(\"reticulate\").`\n\nAfter loading `reticulate`, you can create a virtual environment and install the required `Python` packages/modules:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\n# create a new environment \nvirtualenv_create(\"r-reticulate\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvirtualenv: r-reticulate\n```\n:::\n\n```{.r .cell-code}\n# packages to install \npackages <- c(\"numpy\", \"pandas\")\n\n# install packages to the environment\nvirtualenv_install(\"r-reticulate\", packages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing virtual environment 'r-reticulate' ...\n```\n:::\n:::\n\n\nYou might have to go to `Options > Python > Virtual Environment`, and then select the correct interpreter.\n\nNow, you can run `Python` code! One advantage of doing it in the Quarto document (with `reticulate` package) is that you can reference and transport `R` object directly into the `Python` environment by calling `r.object_name:`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\niris = r.iris\niris_groupMean = iris.groupby(['Species']).mean()\niris_groupMean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\nSpecies                                                         \nsetosa             5.006        3.428         1.462        0.246\nversicolor         5.936        2.770         4.260        1.326\nvirginica          6.588        2.974         5.552        2.026\n```\n:::\n:::\n\n\nYou can do the reverse by referencing the `Python` object in the `R` environment by calling `py$object_name`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(py$iris_groupMean) # back to R code\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3\nColumns: 4\n$ Sepal.Length <dbl> 5.006, 5.936, 6.588\n$ Sepal.Width  <dbl> 3.428, 2.770, 2.974\n$ Petal.Length <dbl> 1.462, 4.260, 5.552\n$ Petal.Width  <dbl> 0.246, 1.326, 2.026\n```\n:::\n:::\n\n\n## Conclusion\n\nQuarto document `.qmd` gives us an easy way to write a blog post that seamlessly integrate text narration with code. As you as you submit a *minimally reproducible* Quarto document (that you can **Render** your document successfully), your post can be published in no time.\n\nFurthermore, the `reticulate` package creates a nice interface that accommodates both `R` and `Python` code in the same document. Many state-of-the-art models and packages in NLP are written in `Python`. Hopefully, this will encourage `R` users to take advantage of `Python` modules in a familiar environment.\n",
    "supporting": [
      "GettingStarted_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}