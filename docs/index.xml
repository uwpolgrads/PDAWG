<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>&lt;b&gt;Political Document Analysis Working Group (P-DAWG)&lt;/b&gt;&lt;br&gt;&lt;em&gt;&lt;small&gt;&lt;small&gt;Department of Political Science, UW&lt;/small&gt;&lt;/small&gt;&lt;/em&gt;</title>
<link>https://uwpolgrads.github.io/PDAWG/index.html</link>
<atom:link href="https://uwpolgrads.github.io/PDAWG/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog by Political Document Analysis Working Group (P-DAWG)</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 20 Mar 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>The Power of Singular Vector Decomposition: A Beginner’s Guide</title>
  <dc:creator>Zhaowen Guo</dc:creator>
  <link>https://uwpolgrads.github.io/PDAWG/posts/032024ZG/svd.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>SVD is not nearly as famous as it should be. — Gilbert Strang</p>
</blockquote>
<blockquote class="blockquote">
<p>SVD is a great 1-stop shop for data analysis. — Daniela Witten</p>
</blockquote>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Singular Vector Decomposition (SVD) is a matrix factorization technique that has become a cornerstone in the field of machine learning (ML). It not only allows for efficiently calculating the inverse of a matrix (if it exists) by multiplying the inverse of each decomposed simpler matrices, but also opens the door to a wide array of applications in ML and beyond.</p>
<p>In what follows, I will start by the definition and properties of SVD, and establish its connection with Principal Component Analysis (PCA). Then I will demonstrate different applications of SVD in ML, including but not limited to missing value imputation and latent feature extraction.</p>
<section id="definition-and-properties-of-svd" class="level3">
<h3 class="anchored" data-anchor-id="definition-and-properties-of-svd">Definition and properties of SVD</h3>
<p>SVD decomposes a data matrix <img src="https://latex.codecogs.com/png.latex?X_%7Bm%20%5Ctimes%20n%7D"> into three matrices <img src="https://latex.codecogs.com/png.latex?U_%7Bm%5Ctimes%20r%7D">, <img src="https://latex.codecogs.com/png.latex?D_%7Br%5Ctimes%20r%7D">, and <img src="https://latex.codecogs.com/png.latex?V_%7Bn%5Ctimes%20r%7D">, regardless of the characteristics of the original matrix.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AX%20=%20UDV%5ET%0A"> where</p>
<ul>
<li>U and V are orthogonal matrices (<img src="https://latex.codecogs.com/png.latex?U%5ET%20U%20=%20I"> and <img src="https://latex.codecogs.com/png.latex?V%5ET%20V%20=%20I">), which are called <span style="text-decoration:underline">left singular vector</span>, and <span style="text-decoration:underline">right singular vector</span>, respectively</li>
<li>D is a diagonal matrix with non-negative and decreasing elements, which are called <span style="text-decoration:underline">singular values</span></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://uwpolgrads.github.io/PDAWG/posts/032024ZG/svd_bipartite.png" class="img-fluid figure-img" style="width:75.0%"></p>
<figcaption class="figure-caption">Image credit: Tai-Danae Bradley at Math3ma</figcaption>
</figure>
</div>
<p>Let’s first check dimensions of the resulting matrices after applying SVD to a toy matrix X.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a matrix</span></span>
<span id="cb1-2">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb1-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb1-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-5">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> T)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply SVD</span></span>
<span id="cb1-8">svd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svd</span>(X)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract U, D, and V matrices</span></span>
<span id="cb1-11">U <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>u</span>
<span id="cb1-12">D <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d)</span>
<span id="cb1-13">V <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>v</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The dimension for U matrix: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(U)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" X "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(U)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "The dimension for U matrix: 4 X 3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The dimension for D matrix: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(D)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" X "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(D)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "The dimension for D matrix: 3 X 3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The dimension for V matrix: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(V)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" X "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(V)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "The dimension for V matrix: 3 X 3"</code></pre>
</div>
</div>
<p>We can then check matrix properties of SVD. As we can observe, matrices U and V are orthogonal, and matrix D is diagonal.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check properties of U and V (orthogonal matrix)</span></span>
<span id="cb7-2">is_orthogonal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(A){</span>
<span id="cb7-3">  A_T <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(A)</span>
<span id="cb7-4">  dot_product_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A_T</span>
<span id="cb7-5">  dot_product_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_T <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A</span>
<span id="cb7-6">  identity_matrix_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(A))</span>
<span id="cb7-7">  identity_matrix_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(A))</span>
<span id="cb7-8">  </span>
<span id="cb7-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(dot_product_1, identity_matrix_1)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-10">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(dot_product_2, identity_matrix_2)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all.equal checks "nearly equal"</span></span>
<span id="cb7-11">  </span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-13">}</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_orthogonal</span>(U) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_orthogonal</span>(V) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check properties of D</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(D) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diagonal values (or singular values in this case)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.546241e+01 1.290662e+00 1.809728e-15</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">D[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row</span>(D) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col</span>(D)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># off-diagonal values are 0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0 0 0</code></pre>
</div>
</div>
</section>
<section id="connection-between-svd-and-pca" class="level3">
<h3 class="anchored" data-anchor-id="connection-between-svd-and-pca">Connection between SVD and PCA</h3>
<p>Now, knowing that SVD can be used to approximate any matrix, it’s an opportune moment to revisit Principal Component Analysis (PCA), an unsupervised ML method that we might be more familiar with. As we will see, <span style="text-decoration:underline">SVD on a de-meaned (centered) data matrix is the same as PCA</span>.</p>
<p>Recall that PCA seeks to find principal components, or the direction in the feature space with maximum variance in the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center the data matrix (column means are 0)</span></span>
<span id="cb15-2">X_centered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(X, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> T)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(X_centered) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if centered</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply SVD to the centered data matrix</span></span>
<span id="cb17-2">svd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svd</span>(X_centered)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply PCA to the data</span></span>
<span id="cb17-5">pca_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prcomp</span>(X, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale. =</span> T)</span></code></pre></div>
</div>
<p>As we can see, columns of the right singular vector V correspond to principal components extracted from PCA, and SVD also yields less elapsed time than PCA. A key advantage of SVD is that it does not require a preliminary step of constructing a covariance as PCA does, providing greater computational efficiency in extracting principal components.</p>
<p>This efficiency becomes particularly prominent when handling</p>
<ul>
<li><p>High-dimensional datasets: when a data matrix possess too many features, the computational cost for constructing its covariance matrix can be huge</p></li>
<li><p>Full-rank data matrix: when the data matrix is full-rank, it often implies that many singular values will be non-negligible, and many principal components will be needed to reconstruct the original matrix</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>v) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right singular vectors</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]       [,2]       [,3]
[1,] 0.5773503 -0.8164966  0.0000000
[2,] 0.5773503  0.4082483 -0.7071068
[3,] 0.5773503  0.4082483  0.7071068</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(pca_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rotation) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># principal components</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           PC1        PC2        PC3
[1,] 0.5773503 -0.8164966  0.0000000
[2,] 0.5773503  0.4082483 -0.7071068
[3,] 0.5773503  0.4082483  0.7071068</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct a high-dimensional and sparse data matrix</span></span>
<span id="cb22-2">n_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb22-3">n_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb22-4"></span>
<span id="cb22-5">sparse_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> n_rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> n_cols)</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually add some non-zero elements to mimic sparsity</span></span>
<span id="cb22-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb22-9">non_zero_elements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb22-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>non_zero_elements) {</span>
<span id="cb22-11">  row_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(n_rows, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-12">  col_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(n_cols, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-13">  sparse_matrix[row_index, col_index] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-14">}</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute every possible rank approximations</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb23-3">  svd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svd</span>(sparse_matrix)</span>
<span id="cb23-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.593   0.002   0.595 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb25-2">  pca_res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prcomp</span>(sparse_matrix)</span>
<span id="cb25-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.693   0.003   0.712 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute top 10 rank approximations</span></span>
<span id="cb27-2">svd_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">proc.time</span>()</span>
<span id="cb27-3">svd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">irlba</span>(sparse_matrix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nv =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">proc.time</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> svd_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.039   0.001   0.040 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">pca_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">proc.time</span>()</span>
<span id="cb29-2">pca_res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prcomp</span>(sparse_matrix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rank. =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">proc.time</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pca_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
  0.617   0.003   0.627 </code></pre>
</div>
</div>
</section>
</section>
<section id="application-impute-missing-values" class="level2">
<h2 class="anchored" data-anchor-id="application-impute-missing-values">Application: Impute Missing Values</h2>
<p>One popular application of SVD is to impute missing values. Without keeping all singular values and vectors, we can just retain the first d largest singular values to approximate the matrix A. The intuition is that the approximated matrix <img src="https://latex.codecogs.com/png.latex?A_d"> being a dense matrix that captures the primary structure and patterns in the original data.</p>
<p>This procedure is also called lower-rank approximation, which can be implemented in the following steps:</p>
<ul>
<li><p>Matrix approximation: fill in NAs with an initial guess (e.g.&nbsp;column means, zeros) and apply SVD with rank d, meaning that we only keep top d singular values and vectors</p></li>
<li><p>Missingness imputation: use the approximated matrix <img src="https://latex.codecogs.com/png.latex?A_d"> to fill in NAs in the original matrix</p></li>
</ul>
<p>Let’s use the following example for illustration:</p>
<p>We start by creating a toy data matrix A and call it our ground truth matrix. Then we manually add sparsity by replacing certain elements with NAs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a toy dataset (sparse matrix)</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb31-3">A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> T), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb31-4">ground_truth_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A</span>
<span id="cb31-5">A[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">A</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    2    5    5    2   NA
[2,]   NA    2   NA    2    4
[3,]    2   NA    1   NA    2
[4,]    1    3   NA    3    1
[5,]    1   NA    4   NA    1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">ground_truth_matrix</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    2    5    5    2   NA
[2,]    5    2   NA    2    4
[3,]    2    4    1   NA    2
[4,]    1    3    2    3    1
[5,]    1    5    4   NA    1</code></pre>
</div>
</div>
<p>Next, we apply SVD with varying d, which indicates the number of singular values/vectors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define svd</span></span>
<span id="cb36-2">impute_svd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(matrix, d){</span>
<span id="cb36-3">  </span>
<span id="cb36-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fill in missingness with column means</span></span>
<span id="cb36-5">  column_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(matrix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T)</span>
<span id="cb36-6">  matrix_filled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matrix</span>
<span id="cb36-7">  na_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(matrix)</span>
<span id="cb36-8">  matrix_filled[na_indices] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> column_means[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col</span>(matrix)[na_indices]]</span>
<span id="cb36-9">  </span>
<span id="cb36-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform svd</span></span>
<span id="cb36-11">  svd_res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svd</span>(matrix_filled)</span>
<span id="cb36-12">  svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>d], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d))</span>
<span id="cb36-13">  </span>
<span id="cb36-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruct the matrix</span></span>
<span id="cb36-15">  approx_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>u <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(svd_res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>v)</span>
<span id="cb36-16">  imputed_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> approx_matrix</span>
<span id="cb36-17">  imputed_vals[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(matrix)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb36-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(imputed_vals)</span>
<span id="cb36-19">}</span></code></pre></div>
</div>
<p>We can use the approximated matrix <img src="https://latex.codecogs.com/png.latex?A_d"> to reconstruct the original matrix and impute missing values. We can evaluate the performance of missingness imputation by mean squared error (MSE).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the metric MSE</span></span>
<span id="cb37-2">mse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(predicted, truth) {</span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((predicted <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> truth)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb37-4">}</span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display MSE for different d values (rank, or number of dimensions to define the reduced matrix)</span></span>
<span id="cb37-7">svd_errors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb37-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (d <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb37-9">  imputed_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">impute_svd</span>(A, d)</span>
<span id="cb37-10">  svd_errors[d] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mse</span>(imputed_values, ground_truth_matrix)</span>
<span id="cb37-11">}</span></code></pre></div>
</div>
<p>How does SVD perform? As a baseline, consider a simple approach by replacing missing values with column means. It seems that rank-2 approximation is an optimal choice, which yields the lowest MSE. However, it’s important to note that it is not always the case that SVD approximation would outperform simple column mean imputation. We might need to consider other matrix decomposition techniques for missingness imputation, such as Non-negative Matrix Factorization (NMF), Alternating Least Squares (ALS), etc..</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create baseline imputation from column means</span></span>
<span id="cb38-2">na_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(A)</span>
<span id="cb38-3">colmean_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A</span>
<span id="cb38-4">colmean_matrix[na_indices] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(A, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col</span>(A)[na_indices]]</span>
<span id="cb38-5">colmean_errors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mse</span>(colmean_matrix[na_indices], ground_truth_matrix[na_indices])</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Report comparison of performance</span></span>
<span id="cb38-8">comparison <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column Means"</span>, </span>
<span id="cb38-9">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank-1 Approximation"</span>,</span>
<span id="cb38-10">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank-2 Approximation"</span>,</span>
<span id="cb38-11">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank-3 Approximation"</span>,</span>
<span id="cb38-12">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank-4 Approximation"</span>,</span>
<span id="cb38-13">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank-5 Approximation"</span>),</span>
<span id="cb38-14">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MSE"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(colmean_errors, svd_errors))</span>
<span id="cb38-15"></span>
<span id="cb38-16">comparison <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">Method</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">MSE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Column Means</td>
<td style="text-align: right;">4.312500</td>
</tr>
<tr class="even">
<td style="text-align: left;">Rank-1 Approximation</td>
<td style="text-align: right;">4.754839</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Rank-2 Approximation</td>
<td style="text-align: right;">4.094591</td>
</tr>
<tr class="even">
<td style="text-align: left;">Rank-3 Approximation</td>
<td style="text-align: right;">4.146353</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Rank-4 Approximation</td>
<td style="text-align: right;">4.319335</td>
</tr>
<tr class="even">
<td style="text-align: left;">Rank-5 Approximation</td>
<td style="text-align: right;">4.312500</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>In line with the idea of missingness imputation, SVD can also be leveraged to enhance recommendation systems! The goal is to predict unknown preferences or ratings of users for items (e.g.&nbsp;movies, products, or services) based on existing ratings. A notable example is <a href="https://en.wikipedia.org/wiki/Netflix_Prize#:~:text=On%20September%2021%2C%202009%2C%20the,for%20predicting%20ratings%20by%2010.06%25.">Netflix Prize competition</a>, where Netflix offered $1 million award to anyone who could improve the accuracy of its movie recommendation system by 10%. The <a href="https://www.asc.ohio-state.edu/statistics/dmsl/GrandPrize2009_BPC_BigChaos.pdf">winning team</a> just used SVD, along with techniques that incorporate other metadata, achieving a 10.06% improvement!</p>
</section>
<section id="application-topic-modeling" class="level2">
<h2 class="anchored" data-anchor-id="application-topic-modeling">Application: Topic Modeling</h2>
<p>SVD is a powerful and generalizable technique that provides us another perspective on topic modeling. We begin by first transforming documents into a document-term matrix, where each row represents a document, each column reflects a term, and each cell denotes frequency. To refine this step further, we can also apply Term Frequency-Inverse Document Frequency <a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf">(TF-IDF)</a> to reweigh the cell values, adjusting for the uniqueness of each term for a given document.</p>
<p>SVD can then be perceived as decomposing a document-term matrix <img src="https://latex.codecogs.com/png.latex?X_%7Bm%20%5Ctimes%20n%7D"> into</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?U_%7Bm%20%5Ctimes%20r%7D">: document-topic matrix</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?D_%7Br%20%5Ctimes%20r%7D">: diagonal elements represent topic importance</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?V_%7Bn%20%5Ctimes%20r%7D">: term-topic matrix</p></li>
</ul>
<p>For topic modeling, a crucial hyperparameter that requires tuning is the number of topics (often denoted by k). In the context of SVD, the idea is equivalent to selecting the top k singular values and their corresponding singular vectors in order to approximate the original data matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct a document-term matrix</span></span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb39-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tm)</span>
<span id="cb39-4">documents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb39-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">doc_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb39-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The sky is blue and beautiful."</span>,</span>
<span id="cb39-7">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Love this blue and beautiful sky!"</span>,</span>
<span id="cb39-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The quick brown fox jumps over the lazy dog."</span>,</span>
<span id="cb39-9">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A king's breakfast has sausages, ham, bacon, eggs, toast, and beans"</span>,</span>
<span id="cb39-10">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I love green eggs, ham, sausages, and bacon!"</span>,</span>
<span id="cb39-11">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The brown fox is quick and the blue dog is lazy!"</span>,</span>
<span id="cb39-12">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The sky is very blue and the sky is very beautiful today"</span>,</span>
<span id="cb39-13">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The dog is lazy but the brown fox is quick!"</span>)</span>
<span id="cb39-14">)</span>
<span id="cb39-15"></span>
<span id="cb39-16">tidy_documents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> documents <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(word, text) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span>
<span id="cb39-19"></span>
<span id="cb39-20">dtm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidy_documents <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(doc_id, word) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cast_dtm</span>(doc_id, word, n)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply SVD and examine each decomposed matrix</span></span>
<span id="cb40-2">svd_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(dtm))</span>
<span id="cb40-3"></span>
<span id="cb40-4">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># choose k=2 for simplicity</span></span>
<span id="cb40-5">Uk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>u[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k]</span>
<span id="cb40-6">Dk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k]</span>
<span id="cb40-7">Vk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> svd_result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>v[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k]</span></code></pre></div>
</div>
<p>As we can see, the decomposed <img src="https://latex.codecogs.com/png.latex?U_k"> matrix captures documents by topics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">Us <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Document ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb41-2">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Topic 1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Uk[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb41-3">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Topic 2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Uk[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb41-4">Us <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb41-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb41-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">Document ID</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 1</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">-0.1294362</td>
<td style="text-align: right;">0.4303175</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">-0.1392703</td>
<td style="text-align: right;">0.4926330</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">-0.5597761</td>
<td style="text-align: right;">-0.1933906</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">-0.0088357</td>
<td style="text-align: right;">0.2551944</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">-0.0175544</td>
<td style="text-align: right;">0.2534139</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">-0.5889438</td>
<td style="text-align: right;">-0.0537521</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">-0.1672636</td>
<td style="text-align: right;">0.6091753</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">-0.5246738</td>
<td style="text-align: right;">-0.1772371</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>The singular values are stored in the following matrix <img src="https://latex.codecogs.com/png.latex?D_k">, which correspond to how important each topic is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">D_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(Dk)</span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(D_matrix) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Topic 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Topic 2"</span>)</span>
<span id="cb42-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(D_matrix) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Topic 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Topic 2"</span>)</span>
<span id="cb42-4"></span>
<span id="cb42-5">D_matrix <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb42-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th"></th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 1</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Topic 1</td>
<td style="text-align: right;">3.993368</td>
<td style="text-align: right;">0.000000</td>
</tr>
<tr class="even">
<td style="text-align: left;">Topic 2</td>
<td style="text-align: right;">0.000000</td>
<td style="text-align: right;">3.460071</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>The <img src="https://latex.codecogs.com/png.latex?V_k"> matrix represents terms by topics.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">terms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(dtm)</span>
<span id="cb43-2">V_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Term</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> terms,</span>
<span id="cb43-3">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Topic 1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Vk[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb43-4">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Topic 2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Vk[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb43-5"></span>
<span id="cb43-6">V_matrix <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">Term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 1</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Topic 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">beautiful</td>
<td style="text-align: right;">-0.1091735</td>
<td style="text-align: right;">0.4428019</td>
</tr>
<tr class="even">
<td style="text-align: left;">blue</td>
<td style="text-align: right;">-0.2566540</td>
<td style="text-align: right;">0.4272669</td>
</tr>
<tr class="odd">
<td style="text-align: left;">sky</td>
<td style="text-align: right;">-0.1510589</td>
<td style="text-align: right;">0.6188605</td>
</tr>
<tr class="even">
<td style="text-align: left;">love</td>
<td style="text-align: right;">-0.0392713</td>
<td style="text-align: right;">0.2156161</td>
</tr>
<tr class="odd">
<td style="text-align: left;">brown</td>
<td style="text-align: right;">-0.4190432</td>
<td style="text-align: right;">-0.1226506</td>
</tr>
<tr class="even">
<td style="text-align: left;">dog</td>
<td style="text-align: right;">-0.4190432</td>
<td style="text-align: right;">-0.1226506</td>
</tr>
<tr class="odd">
<td style="text-align: left;">fox</td>
<td style="text-align: right;">-0.4190432</td>
<td style="text-align: right;">-0.1226506</td>
</tr>
<tr class="even">
<td style="text-align: left;">jumps</td>
<td style="text-align: right;">-0.1401764</td>
<td style="text-align: right;">-0.0558921</td>
</tr>
<tr class="odd">
<td style="text-align: left;">lazy</td>
<td style="text-align: right;">-0.4190432</td>
<td style="text-align: right;">-0.1226506</td>
</tr>
<tr class="even">
<td style="text-align: left;">quick</td>
<td style="text-align: right;">-0.4190432</td>
<td style="text-align: right;">-0.1226506</td>
</tr>
<tr class="odd">
<td style="text-align: left;">bacon</td>
<td style="text-align: right;">-0.0066085</td>
<td style="text-align: right;">0.1469936</td>
</tr>
<tr class="even">
<td style="text-align: left;">beans</td>
<td style="text-align: right;">-0.0022126</td>
<td style="text-align: right;">0.0737541</td>
</tr>
<tr class="odd">
<td style="text-align: left;">breakfast</td>
<td style="text-align: right;">-0.0022126</td>
<td style="text-align: right;">0.0737541</td>
</tr>
<tr class="even">
<td style="text-align: left;">eggs</td>
<td style="text-align: right;">-0.0066085</td>
<td style="text-align: right;">0.1469936</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ham</td>
<td style="text-align: right;">-0.0066085</td>
<td style="text-align: right;">0.1469936</td>
</tr>
<tr class="even">
<td style="text-align: left;">king's</td>
<td style="text-align: right;">-0.0022126</td>
<td style="text-align: right;">0.0737541</td>
</tr>
<tr class="odd">
<td style="text-align: left;">sausages</td>
<td style="text-align: right;">-0.0066085</td>
<td style="text-align: right;">0.1469936</td>
</tr>
<tr class="even">
<td style="text-align: left;">toast</td>
<td style="text-align: right;">-0.0022126</td>
<td style="text-align: right;">0.0737541</td>
</tr>
<tr class="odd">
<td style="text-align: left;">green</td>
<td style="text-align: right;">-0.0043959</td>
<td style="text-align: right;">0.0732395</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now, we can examine top 5 terms associated with each topic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">top_terms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(Vk, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) terms[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]])</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_terms)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]    [,2]       
[1,] "fox"   "sky"      
[2,] "brown" "beautiful"
[3,] "dog"   "blue"     
[4,] "lazy"  "love"     
[5,] "quick" "bacon"    </code></pre>
</div>
</div>
<p>Beyond what has been discussed, some other cool applications of SVD in NLP include: information retrieval via <a href="https://link.springer.com/chapter/10.1007/978-981-99-3243-6_45">Latent Semantic Analysis</a> and word co-occurrence detection in <a href="https://smltar.com/embeddings.html">word embeddings</a> and other downstream tasks (e.g.&nbsp;<a href="https://ideas.repec.org/p/sek/iacpro/0702094.html">text classification</a>). Feel free to explore!</p>
<p><strong>References and additional resources:</strong></p>
<ul>
<li><p>A wonderful twitter <a href="https://twitter.com/WomenInStat/status/1285612667839885312">thread</a> on SVD by Daniela Witten (a nice summary can be found <a href="https://www.govindgnair.com/post/svd-is-almost-all-you-need/">here</a>)</p></li>
<li><p>A cool geometric <a href="https://www.youtube.com/watch?v=vSczTbgc8Rc">interpretation</a> of SVD</p></li>
<li><p>A nice <a href="https://www.youtube.com/watch?v=lRZ4aMaXPBI&amp;list=PLtmWHNX-gukKocXQOkQjuVxglSDYWsSh9&amp;index=3">tutorial</a> illustrating the connection between SVD and topic modeling using Python</p></li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>Machine Learning</category>
  <category>SVD</category>
  <category>PCA</category>
  <category>Topic Modeling</category>
  <guid>https://uwpolgrads.github.io/PDAWG/posts/032024ZG/svd.html</guid>
  <pubDate>Wed, 20 Mar 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Zero-shot classification with Hugging Face</title>
  <dc:creator>Brian Leung</dc:creator>
  <link>https://uwpolgrads.github.io/PDAWG/posts/022324BL/huggingFace.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://uwpolgrads.github.io/PDAWG/posts/022324BL/hf-logo-with-title.png" class="img-fluid figure-img"></p>
</figure>
</div>
<section id="why-hugging-face" class="level2">
<h2 class="anchored" data-anchor-id="why-hugging-face">Why Hugging Face?</h2>
<p>Advances in natural language processing (NLP), particularly with the advent of of large language models (LLMs), have created exciting opportunities for social science researchers to deal with a large amount of text as data. But numerous barriers to entry existed: the knowledge, data, and computational resources required to train and fine-tune the models to specific tasks can be very daunting for us.</p>
<p>So, there is a <em>gap</em> between what NLP models or resources are available out there and what we as social scientists can reasonably digest and incorporate into our workflow. Researchers with a technical comparative advantage in training and fine-tuning models have already produced resources that have immense potentials for social science applications.</p>
<p>For example, <a href="https://aclanthology.org/2022.lrec-1.801/">PoliBERTweet</a> is a pre-trained BERT model – a transformer-based model, much like its cousin GPT (“Generative Pre-trained <em>Transformer</em>”). It is pre-trained in the sense that it was trained on 83 million politics-related Tweets, making it suitable for a wide range of downstream, domain-specific tasks related to politics. But the problem is, how we as social scientists can take advantage of such readily available resources?</p>
<p>There is where <a href="https://huggingface.co/">Hugging Face</a> comes into play. Much like Github, it is a community platform that allows practitioners and researchers to host and collaborate on AI models. Many state-of-the-art NLP models are available for specific downstream tasks, like text classification (e.g., for sentiment analysis or topic classification) or embedding documents to compare their similarity.</p>
<p>Most importantly, it comes with a <code>Python</code> package – <code>transformers</code> – that makes downloading and implementing those pre-trained models super easy and dramatically lowers the entry cost. But it does require some knowledge in <code>Python</code>.</p>
</section>
<section id="how-to-get-started-as-a-r-user" class="level2">
<h2 class="anchored" data-anchor-id="how-to-get-started-as-a-r-user">How to get started as a R user?</h2>
<p>In this post, I want to develop a workflow that centers on a <code>R</code> environment (e.g., writing a <code>.rmd</code>/<code>.qmd</code>, or wrangling data with <code>tidyverse</code>) that feels familiar to us, but one that incorporates the power of <code>Python</code> packages like <code>transformers</code> <em>only when we need to</em>.</p>
<p>I can’t tell you how much the fear and discomfort from an interrupted workflow – switching from one language to a less-familiar one, and transporting objects between different interfaces – have discouraged people (myself included) from taking advantage of <code>Python</code>.</p>
<p>Hopefully, an integrated workflow that makes <code>R</code> and <code>Python</code> interoperable will remove the last barrier to entry to unleash the power of NLP in our research.</p>
</section>
<section id="setting-up-python-in-r-with-reticulate" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-python-in-r-with-reticulate">Setting up Python in R with <code>reticulate</code></h2>
<p>First, let’s set up a virtual environment to install the required <code>Python</code> packages – particularly <code>transformers</code> via the <code>reticulate</code> package in <code>R</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">virtualenv_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r-reticulate"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>virtualenv: r-reticulate</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">packages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transformers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tensorflow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torchvision"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torchaudio"</span>)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">virtualenv_install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r-reticulate"</span>, packages)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using virtual environment 'r-reticulate' ...</code></pre>
</div>
</div>
<p>If it is the first time for you to install the packages, it might take some time as they are quite large in size.</p>
</section>
<section id="basic-text-classification-with-transformers" class="level2">
<h2 class="anchored" data-anchor-id="basic-text-classification-with-transformers">Basic text classification with <code>transformers</code></h2>
<p>To see if you have installed the packages and selected the correct <code>Python</code> interpreter, run the following code to import <code>pipeline</code>, the key function from <code>transformers</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span></code></pre></div>
</div>
<p>Now, we can take advantage of pre-trained models on Hugging Face and perform text analyses. It can be done in <em>a few lines of code</em>. But you must first define the <em>language task</em> you want to perform and select the corresponding <em>model.</em> For example, I can perform sentiment analysis on a text by running:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentiment-analysis"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>No model was supplied, defaulted to distilbert/distilbert-base-uncased-finetuned-sst-2-english and revision af0f99b (https://huggingface.co/distilbert/distilbert-base-uncased-finetuned-sst-2-english).
Using a pipeline without specifying a model name and revision in production is not recommended.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This blog post is not unhelpful"</span></span>
<span id="cb8-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier(text)</span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'label': 'POSITIVE', 'score': 0.7062975168228149}]</code></pre>
</div>
</div>
<p>The sentiment classifier assigns a positive label to my double-negative sentence, which is reasonable. More generically, in <code>pipeline(...)</code>, you have to declare the task (e.g., “sentiment-analysis”) and the model. The default model “distilbert/distilbert-base-uncased-finetuned-sst-2-english” is chosen because the user doesn’t specify one, which is not a recommended practice. You can go to <a href="https://huggingface.co/models">Hugging Face</a> to look for specific models for your particular NLP tasks. Be aware that NLP models tend to be quite large in size (some gigabytes), so it can take a while for your first time installation.</p>
</section>
<section id="classifying-political-stances-with-transformers" class="level2">
<h2 class="anchored" data-anchor-id="classifying-political-stances-with-transformers">Classifying political stances with <code>transformers</code></h2>
<p>The following section showcases a DeBERTa-based model trained for stance detection, first by <a href="https://huggingface.co/MoritzLaurer/deberta-v3-large-zeroshot-v1.1-all-33">Laurer et al</a> and further improved on by <a href="https://huggingface.co/mlburnham/deberta-v3-large-polistance-affect-v1.0">Michael Burnham</a>. Behind the model, there is an interesting literature called natural language inference (NLI) or textual entailment. This is suitable for detecting political or issue stances behind some text in a zero-shot setting (i.e., the model can make prediction on arbitrary labels it wasn’t trained on but we care about).</p>
<p>To perform political stance detection:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">zeroshot_classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero-shot-classification"</span>, model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mlburnham/deberta-v3-large-polistance-affect-v1.0"</span>)</span>
<span id="cb10-2">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Many American jobs are shipped to Chinese factories."</span></span>
<span id="cb10-3">hypothesis_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This text supports trading </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> with China"</span></span>
<span id="cb10-4">classes_verbalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"more"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"less"</span>]</span>
<span id="cb10-5">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zeroshot_classifier(text, classes_verbalized, hypothesis_template<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hypothesis_template, multi_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'sequence': 'Many American jobs are shipped to Chinese factories.', 'labels': ['less', 'more'], 'scores': [0.9999904632568359, 9.514573321212083e-06]}</code></pre>
</div>
</div>
<p>The classifier looks at the text and perform hypothesis testings: does the text (based on “common” understanding of the language) <em>entail</em> one hypothesis (e.g., it supports trading more with China) or the other (e.g., trading less with China)? It assigns probabilities to each hypothesis and the label with the highest probability is chosen (multiple labels are allowed as an option though). For example, the classifier correctly identify the text (“Many American jobs are shipped to Chinese factories.”) as a statement that supports trading less with China.</p>
</section>
<section id="bonus" class="level2">
<h2 class="anchored" data-anchor-id="bonus">Bonus</h2>
<p>To transport the result back to <code>R</code> for wrangling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb12-2">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>output</span>
<span id="cb12-3">output <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id_cols =</span> sequence, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> labels, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  sequence                                              less       more
  &lt;chr&gt;                                                &lt;dbl&gt;      &lt;dbl&gt;
1 Many American jobs are shipped to Chinese factories.  1.00 0.00000951</code></pre>
</div>
</div>
<p>To deal with a warning:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb14-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOKENIZERS_PARALLELISM"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"false"</span></span></code></pre></div>
</div>
<p>To enable GPU:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import torch</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if torch.backends.mps.is_available():</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     mps_device = torch.device("mps")</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     x = torch.ones(1, device=mps_device)</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     print (x)</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># else:</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     print ("MPS device not found.")</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>Python</category>
  <category>Hugging Face</category>
  <category>Transformers</category>
  <category>Zero-shot Classification</category>
  <category>Topic Modeling</category>
  <guid>https://uwpolgrads.github.io/PDAWG/posts/022324BL/huggingFace.html</guid>
  <pubDate>Fri, 23 Feb 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>How to write a blog post with R or Python code?</title>
  <dc:creator>Brian Leung</dc:creator>
  <link>https://uwpolgrads.github.io/PDAWG/posts/022224BL/GettingStarted.html</link>
  <description><![CDATA[ 




<p>Welcome to P-DAWG! This post introduces us to using Quarto (<code>.qmd</code>) to write a blog-style document that integrates <code>R</code> or <code>Python</code> code with text!</p>
<section id="quarto-.qmd-is-just-like-rmarkdown-.rmd" class="level2">
<h2 class="anchored" data-anchor-id="quarto-.qmd-is-just-like-rmarkdown-.rmd">Quarto (<code>.qmd</code>) is just like RMarkdown (<code>.rmd</code>)!</h2>
<p>You can open a new Quarto Document (<code>.qmd</code>) in Rstudio and choose <code>HTML</code> as the format. This works just like a traditional RMarkdown file (<code>.rmd</code>).</p>
<p>You can copy and paste the following code to the preamble (i.e., top of the document) and fill out the details:</p>
<pre><code>---
title: "Give it a nice title"
author: "Your good name"
date: "today is?"
categories: [tag1, tag2, tag3...] 
message: false 
warning: false
---</code></pre>
</section>
<section id="working-with-r-code" class="level2">
<h2 class="anchored" data-anchor-id="working-with-r-code">Working with <code>R</code> code</h2>
<p>Inside the <code>.qmd</code> document, you can type text anywhere you like. To insert a code chunk, type “/” to select options from a drop-down menu (if you are using Visual editor mode). For example, I can insert the following <code>R</code> code chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>Then you can perform data analysis as usual:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(iris)</span>
<span id="cb3-2"></span>
<span id="cb3-3">iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), mean))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 5
  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width
  &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;
1 setosa             5.01        3.43         1.46       0.246
2 versicolor         5.94        2.77         4.26       1.33 
3 virginica          6.59        2.97         5.55       2.03 </code></pre>
</div>
</div>
<p>Visualization is also easy:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(iris, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Sepal.Length, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Petal.Length, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> Species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://uwpolgrads.github.io/PDAWG/posts/022224BL/GettingStarted_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="working-with-python-code" class="level2">
<h2 class="anchored" data-anchor-id="working-with-python-code">Working with <code>Python</code> code</h2>
<p>Quarto document has the advantage of being able to run <code>Python</code> code at the same time. But this does requiries some knowledge about the language, and especially how virtual environment works for managing packages.</p>
<p>To do that from a <code>RStudio</code> environment, you have to first install <code>reticulate</code> package in <code>R</code> by running <code>install.packages("reticulate")</code>.</p>
<p>After loading <code>reticulate</code>, you can create a virtual environment and install the required <code>Python</code> packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reticulate)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new environment </span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">virtualenv_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r-reticulate"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>virtualenv: r-reticulate</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># packages to install </span></span>
<span id="cb8-2">packages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install packages to the environment</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">virtualenv_install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r-reticulate"</span>, packages)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using virtual environment 'r-reticulate' ...</code></pre>
</div>
</div>
<p>You might have to go to <code>Options &gt; Python &gt; Virtual Environment</code>, and then select the correct <code>Python</code> interpreter.</p>
<p>Now, you can run <code>Python</code> code! One advantage of doing it in the Quarto document (with <code>reticulate</code> package) is that you can reference and transport <code>R</code> object directly into the <code>Python</code> environment by calling <code>r.object_name:</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb10-3"></span>
<span id="cb10-4">iris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.iris <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transport R object into Python</span></span>
<span id="cb10-5">iris_groupMean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Species'</span>]).mean()</span>
<span id="cb10-6">iris_groupMean</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            Sepal.Length  Sepal.Width  Petal.Length  Petal.Width
Species                                                         
setosa             5.006        3.428         1.462        0.246
versicolor         5.936        2.770         4.260        1.326
virginica          6.588        2.974         5.552        2.026</code></pre>
</div>
</div>
<p>You can do the reverse by accessing <code>Python</code> object in the <code>R</code> environment by calling <code>py$object_name</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(py<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iris_groupMean) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># back to R code</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 3
Columns: 4
$ Sepal.Length &lt;dbl&gt; 5.006, 5.936, 6.588
$ Sepal.Width  &lt;dbl&gt; 3.428, 2.770, 2.974
$ Petal.Length &lt;dbl&gt; 1.462, 4.260, 5.552
$ Petal.Width  &lt;dbl&gt; 0.246, 1.326, 2.026</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Quarto document <code>.qmd</code> gives us an easy way to write a blog post that seamlessly integrates narrative text with code. As long as you submit a <em>minimally reproducible</em> Quarto document (that you can <strong>Render</strong> your document successfully), your post can be published in no time.</p>
<p>Furthermore, the <code>reticulate</code> package enables interoperability between <code>R</code> and <code>Python</code> code in the same document. Many state-of-the-art models and packages in NLP are written in <code>Python</code>. Hopefully, this will encourage <code>R</code> users to take advantage of <code>Python</code> packages in a familiar environment.</p>


</section>

 ]]></description>
  <category>News</category>
  <category>R</category>
  <category>Python</category>
  <guid>https://uwpolgrads.github.io/PDAWG/posts/022224BL/GettingStarted.html</guid>
  <pubDate>Wed, 21 Feb 2024 08:00:00 GMT</pubDate>
</item>
</channel>
</rss>
